import streamlit as stimport pandas as pdfrom db import get_db_connection
Initial nutritional data
INITIAL_NUTRITION = [    ('Apple', 54, 2.1, 3, 107, 'Rich in antioxidants for overall wellness.'),    ('Mosambi', 43, 0.5, 50, 490, 'High in Vitamin C for immunity.'),    ('Banana', 87, 2.4, 11, 357, 'Excellent for energy and digestion.'),    ('Papaya', 39, 2.1, 96, 257, 'Aids digestion with enzymes like papain.'),    ('Kiwi', 61, 2.7, 146, 304, 'Boosts immune system and skin health.'),    ('Dragon Fruit', 60, 2.9, 3, 200, 'Low calorie, high in antioxidants.'),    ('Pineapple', 45, 0.9, 40, 107, 'Contains bromelain for anti-inflammation.'),    ('Custard Apple', 101, 4.4, 36, 382, 'Supports heart health with potassium.'),    ('Sapota', 83, 5.3, 15, 193, 'High fiber for digestive health.')]
def initialize_nutrition():    """Initialize nutritional data in the database."""    conn = get_db_connection()    if conn is None:        return    try:        c = conn.cursor()        c.execute("SELECT COUNT(*) FROM nutrition")        if c.fetchone()[0] == 0:            c.executemany("INSERT INTO nutrition (item_name, calories, fiber, vit_c, potassium, notes) VALUES (?, ?, ?, ?, ?, ?)", INITIAL_NUTRITION)            conn.commit()        get_nutrition_data.clear()    except sqlite3.Error as e:        st.error(f"Error initializing nutrition: {str(e)}")
@st.cache_data(ttl=300)def get_nutrition_data():    """Fetch nutritional data from database."""    conn = get_db_connection()    if conn is None:        return pd.DataFrame()    try:        return pd.read_sql_query("SELECT * FROM nutrition", conn)    except sqlite3.Error as e:        st.error(f"Error fetching nutrition: {str(e)}")        return pd.DataFrame()