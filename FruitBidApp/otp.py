import streamlit as stfrom twilio.rest import Clientfrom datetime import datetime, timedeltaimport randomimport osfrom db import get_db_connection
Twilio credentials from environment
TWILIO_SID = os.getenv('TWILIO_SID')TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')TWILIO_PHONE = os.getenv('TWILIO_PHONE')
def send_otp(mobile_email, reg_type):    """Send OTP via Twilio for mobile or placeholder for email."""    if reg_type == 'Mobile':        if not all([TWILIO_SID, TWILIO_AUTH_TOKEN, TWILIO_PHONE]):            st.error("Twilio credentials not configured.")            return False        otp = str(random.randint(1000, 9999))        expiration = datetime.now() + timedelta(minutes=5)        try:            client = Client(TWILIO_SID, TWILIO_AUTH_TOKEN)            message = client.messages.create(                body=f"Your FruitBid OTP is {otp}. Valid for 5 minutes.",                from_=TWILIO_PHONE,                to=mobile_email            )            conn = get_db_connection()            if conn:                c = conn.cursor()                c.execute("INSERT INTO otps (mobile_email, otp, expiration) VALUES (?, ?, ?)",                          (mobile_email, otp, expiration.isoformat()))                conn.commit()            return True        except Exception as e:            st.error(f"OTP sending error: {str(e)}")            return False    else:        st.warning("Email OTP not implemented yet.")        return False
def verify_otp(mobile_email, otp_input):    """Verify OTP from database."""    conn = get_db_connection()    if conn is None:        return False    try:        c = conn.cursor()        c.execute("SELECT otp, expiration FROM otps WHERE mobile_email=? ORDER BY id DESC LIMIT 1", (mobile_email,))        row = c.fetchone()        if row:            otp, exp = row            if datetime.fromisoformat(exp) > datetime.now() and otp == otp_input:                c.execute("DELETE FROM otps WHERE mobile_email=?", (mobile_email,))                conn.commit()                return True        return False    except sqlite3.Error as e:        st.error(f"OTP verification error: {str(e)}")        return False